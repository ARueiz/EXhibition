
@{
    ViewBag.Title = "ScanLoginQRCode";
}

<div class="mt-3 p-5" id="contain">
    <h2>QR Code 登入</h2>
    <div id="video-container">
        <video id="qr-video" style="width: 100% !important; height: 100% !important;"></video>
    </div>
    <button class="btn btn-primary" id="start-button">Start</button>
    <button class="btn btn-primary" id="stop-button">Stop</button>
    <h5>Detected QR code: </h5>
    <span id="cam-qr-result">None</span>
    <br>
    <h5>Last detected at: </h5>
    <span id="cam-qr-result-timestamp"></span>
    <br>
</div>

@section scripts{



    <script type="module">
        import QrScanner from "https://dv6230.github.io/QRCode_Test/qr-scanner.min.js";

        const video = document.getElementById('qr-video');
        //const videoContainer = document.getElementById('video-container');
        const camList = document.getElementById('cam-list');
        const camHasFlash = document.getElementById('cam-has-flash');
        const camQrResult = document.getElementById('cam-qr-result');
        const camQrResultTimestamp = document.getElementById('cam-qr-result-timestamp');

        function setResult(label, result) {
            console.log(result.data);
            label.textContent = result.data;
            camQrResultTimestamp.textContent = new Date().toString();
            label.style.color = 'teal';
            clearTimeout(label.highlightTimeout);
            label.highlightTimeout = setTimeout(() => label.style.color = 'inherit', 100);
            scanner.stop();
            alert(result.data);
        }

        const scanner = new QrScanner(video, result => setResult(camQrResult, result), {
            onDecodeError: error => {
                camQrResult.textContent = error;
                camQrResult.style.color = 'inherit';
            },
            highlightScanRegion: true,
            highlightCodeOutline: true,
            maxScansPerSecond: 15,
        });

        const updateFlashAvailability = () => {
            scanner.hasFlash().then(hasFlash => {
                camHasFlash.textContent = hasFlash;
                //flashToggle.style.display = hasFlash ? 'inline-block' : 'none';
            });
        };

        scanner.start().then(() => {
            updateFlashAvailability();
            // List cameras after the scanner started to avoid listCamera's stream and the scanner's stream being requested
            // at the same time which can result in listCamera's unconstrained stream also being offered to the scanner.
            // Note that we can also start the scanner after listCameras, we just have it this way around in the demo to
            // start the scanner earlier.
            QrScanner.listCameras(true).then(cameras => cameras.forEach(camera => {
                const option = document.createElement('option');
                option.value = camera.id;
                option.text = camera.label;
                camList.add(option);
            }));
        });

        // QrScanner.hasCamera().then(hasCamera => camHasCamera.textContent = hasCamera);

        // for debugging
        window.scanner = scanner;

        document.getElementById('start-button').addEventListener('click', () => {
            scanner.start();
        });

        document.getElementById('stop-button').addEventListener('click', () => {
            scanner.stop();
        });


    </script>


}

